#ifndef ARRAY1_H
#define ARRAY1_H
#include <iostream.h>
class Array {
	friend ostream &operator<<( ostream & , const Array & );
	friend istream &operator>>( istream & , Array & );
  Public :
	Array ( int =10 );
	Array ( const Array & );
	~Array ();
	int getsize() const ;
	const Array &operator=( const Array & );
	bool operator ==( const Array  &) const;
	booloperator !=( const Array &right ) const { return !(*this ==right );}
	int &operator[](int);
	const int &operator[] ( int ) const ;
	static int getArraycount();
	
Private :
	int size ;
	int *ptr;
	static int arraycount;
};
#endif

*********************************************
#include <iostream.h>
#include <iomanip.h>
#include <stdlib.h>
#include <assert.h> 
#include "array1.h"

int Array::arraycount=0;
Array::Array ( int arraysize )
{
  size = (arraysize > 0 ? arraysize :10 );
  ptr =new int [size]; 
  assert (ptr !=0 );
  ++arraycount;
  for  ( int i=0;i< size ; i++)
     ptr[i] =0;
}
Array ::~Array()
{
  delete [] ptr;
  --arraycount;
}
int Array ::getsize() const { return size;}
const Array  &Array::operator=( const Array &right )
{
  if ( &right !=this ) 
   {
     if (size !=right.size )
      {
	delete [] ptr ;
	size = right.size ;
	ptr = new int [ size ];
	assert ( ptr !=0 );
       }      	
  for (int i=0; i< size ; i++ )
    ptr [i] = right.ptr [i] ;
   }
return *this;
}

bool Array::operator == ( const Array &right ) const
 {
   if (size != right .size )
      return  false ;
   for ( int i=0; i< size ;i++ )
      if ( ptr [ i ]  != right.ptr [i ]  )   
         return false ;
   return true ;
}

int &Array::operator[] ( int subscript )
{
  assert ( 0 <= subscript && subscript < size );
  return ptr [subscript];
}

const int &Array::operator[] ( int subscript ) const
{
 assert ( 0<= subscript && subscript <size );
 return ptr [subscript ];
}


int Array ::getArraycount() { return arraycount ;}

istream &operator>> ( istream &input, Array &a )
{
 for ( int i = 0 ; i < a.size ; i++ )
  input >> a.ptr[ i ] ;
 return input ;
}


ostream &operator<< ( ostream &output , const Array &a )
{
 int i ;
 for ( i=0;i<a.size;i++)
  {
    output << setw( 12 ) << a.ptr [ i ] ;
    if ( ( i+1 ) % 4==0 )
       output << endl;

  }
 if  ( i % 4 != 0 )
   output << endl;
 return  output  ;
}

**************************************************
#include <iosstream.h>
#include <array1.h>

int main ()
{
cout << "# of arrays  instantiated = "<<Array::getArray count() << '\n';
Array integers1 (7),integers2;
cout << "#of arrays instantiated = "<<Array::getArraycount() <<"\n\n";
cout << "Size of Array integers1 is :"<< integers1.getsize () << "\nArray after initialisation :\n"
     <<integers1<< '\n';
cout << " \nSize of array integers2 is: "<< integers2.getsize() << "\n Array after initialisation :\n"
     << integers2<<'\n';

cout << " Input 17 integers:\n";
cin >> integers1 >> integers2;
cout  << " After input , the arrays contain:\n" << "integers1:\n" << "integers1
      << "integers2:\n" << integers2 << '\n';
cout << "Evaluating : integers1 !=integers2\n";
if ( integers1 != integers2 )
   cout << "They are not equal \n";

Array integers3( integers1 );

cout << "\nSize of array integers3 is :"<< integers3.getsize()
     <<" \nArray after initialisation :\n" << integers3 << '\n';

cout << "Asigning integer2 to integers1 :\n";
integers1=integers2;
cout << "integers1 :\n" << integers1 
     << "integers2 :\n" << integers2 <<'\n';
cout << "Evaluating: integers1 == integers2 \n";
if ( integers1 == integers2 )
   cout << "They are equal\n\n";

cout << "integers1[5] is << " integers1[5] << '\n';

cout << "Assigning 1000 to integers1[5] \n";
integers1[5] = 1000;
cout << "integers1:\n" << integers1<< '\n';
cout << "Attempt to assign 1000 to integers1[15]" << endl;
integers1[15] = 1000;
return 0;
}